// Copyright (C) 2020. Huawei Technologies Co., Ltd. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package agent;

// Interface exported by the server.
service Agent {

    // Stops the server.
    rpc StopWorker(Port) returns (Status) {}

    // Spawns worker processes.
    // Returns the address (ip, port) of new worker process.
    rpc SpawnWorker(Machine) returns (Connection) {}

    // Builds Agent according the AgentSpec.
    rpc Build(Specification) returns (Status) {}

    // Agent processes observations and returns action.
    rpc Act(Observation) returns (Action) {}
}

// Port number.
message Port {
    int32 num = 1;
}

// Dummy output message.
message Output {
    optional string msg = 1;
}

// Dummy input for SpawnWorker rpc.
message Machine {
}

// Status
message Status {
    int32 code = 1;
    string msg = 2;
}

message Connection{
    Status status = 1;
    optional int32 port = 2;
}

message Specification {
    bytes payload = 1;
}

message Observation {
    bytes payload = 1;
}

message Action {
    Status status = 1;
    optional bytes action = 2;
}