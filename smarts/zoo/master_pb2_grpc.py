# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import smarts.zoo.master_pb2 as master__pb2


class MasterStub(object):
    """Interface exported by the master server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StopWorker = channel.unary_unary(
            "/master.Master/StopWorker",
            request_serializer=master__pb2.Port.SerializeToString,
            response_deserializer=master__pb2.Status.FromString,
        )
        self.SpawnWorker = channel.unary_unary(
            "/master.Master/SpawnWorker",
            request_serializer=master__pb2.Machine.SerializeToString,
            response_deserializer=master__pb2.Connection.FromString,
        )


class MasterServicer(object):
    """Interface exported by the master server.
    """

    def StopWorker(self, request, context):
        """Stop worker process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SpawnWorker(self, request, context):
        """Spawn worker processes.
        Returns the address (ip, port) of new worker process.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MasterServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StopWorker": grpc.unary_unary_rpc_method_handler(
            servicer.StopWorker,
            request_deserializer=master__pb2.Port.FromString,
            response_serializer=master__pb2.Status.SerializeToString,
        ),
        "SpawnWorker": grpc.unary_unary_rpc_method_handler(
            servicer.SpawnWorker,
            request_deserializer=master__pb2.Machine.FromString,
            response_serializer=master__pb2.Connection.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "master.Master", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Master(object):
    """Interface exported by the master server.
    """

    @staticmethod
    def StopWorker(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/master.Master/StopWorker",
            master__pb2.Port.SerializeToString,
            master__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SpawnWorker(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/master.Master/SpawnWorker",
            master__pb2.Machine.SerializeToString,
            master__pb2.Connection.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
